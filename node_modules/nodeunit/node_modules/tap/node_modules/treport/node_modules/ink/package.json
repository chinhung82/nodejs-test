{
  "name": "ink",
  "version": "2.1.1",
  "description": "React for CLI",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "vadimdemedes/ink"
  },
  "author": {
    "name": "vdemedes",
    "email": "vdemedes@gmail.com",
    "url": "github.com/vadimdemedes"
  },
  "main": "build",
  "engines": {
    "node": ">=8"
  },
  "scripts": {
    "build": "babel src --out-dir=build",
    "prepare": "npm run build",
    "test": "xo && FORCE_COLOR=true ava",
    "pretest": "npm run build",
    "cast": "svg-term --command='node media/demo.js' --out=media/demo.svg --from=100 --window --width=50 --height=8 --term=iterm2 --profile=Snazzy"
  },
  "types": "index.d.ts",
  "files": [
    "build",
    "index.d.ts"
  ],
  "keywords": [
    "react",
    "cli",
    "jsx",
    "stdout",
    "components",
    "command-line",
    "preact",
    "redux",
    "print",
    "render",
    "colors",
    "text"
  ],
  "dependencies": {
    "@types/react": "^16.8.6",
    "arrify": "^1.0.1",
    "auto-bind": "^2.0.0",
    "chalk": "^2.4.1",
    "cli-cursor": "^2.1.0",
    "cli-truncate": "^1.1.0",
    "is-ci": "^2.0.0",
    "lodash.throttle": "^4.1.1",
    "log-update": "^3.0.0",
    "prop-types": "^15.6.2",
    "react-reconciler": "^0.20.0",
    "scheduler": "^0.13.2",
    "signal-exit": "^3.0.2",
    "slice-ansi": "^1.0.0",
    "string-length": "^2.0.0",
    "widest-line": "^2.0.0",
    "wrap-ansi": "^5.0.0",
    "yoga-layout-prebuilt": "^1.9.3"
  },
  "devDependencies": {
    "@babel/cli": "^7.1.2",
    "@babel/core": "^7.1.2",
    "@babel/plugin-proposal-class-properties": "^7.1.0",
    "@babel/plugin-proposal-object-rest-spread": "^7.0.0",
    "@babel/preset-react": "^7.0.0",
    "ava": "^1.3.1",
    "babel-eslint": "^10.0.1",
    "delay": "^4.1.0",
    "eslint-config-xo-react": "^0.19.0",
    "eslint-plugin-react": "^7.11.1",
    "eslint-plugin-react-hooks": "^1.4.0",
    "import-jsx": "^1.3.0",
    "ms": "^2.1.1",
    "node-pty": "^0.8.1",
    "p-queue": "^3.0.0",
    "react": "^16.6.1",
    "sinon": "^7.2.7",
    "strip-ansi": "^5.2.0",
    "svg-term-cli": "^2.1.1",
    "xo": "^0.24.0"
  },
  "peerDependencies": {
    "react": ">=16.8.0"
  },
  "babel": {
    "plugins": [
      "@babel/plugin-proposal-class-properties",
      "@babel/plugin-proposal-object-rest-spread",
      "@babel/plugin-transform-modules-commonjs"
    ],
    "presets": [
      "@babel/preset-react"
    ]
  },
  "ava": {
    "babel": {
      "testOptions": {
        "plugins": [
          "@babel/plugin-proposal-class-properties",
          "@babel/plugin-proposal-object-rest-spread",
          "@babel/plugin-transform-modules-commonjs"
        ],
        "presets": [
          "@babel/preset-react"
        ]
      }
    }
  },
  "xo": {
    "parser": "babel-eslint",
    "extends": [
      "xo-react"
    ],
    "plugins": [
      "react"
    ],
    "overrides": [
      {
        "files": "src/components/*.js",
        "rules": {
          "unicorn/filename-case": "off",
          "react/require-default-props": "warning"
        }
      }
    ]
  },
  "readme": "<h1 align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"300\" alt=\"Ink\" src=\"media/logo.png\">\n\t<br>\n\t<br>\n\t<br>\n</h1>\n\n> React for CLIs. Build and test your CLI output using components.\n\n[![Build Status](https://travis-ci.org/vadimdemedes/ink.svg?branch=master)](https://travis-ci.org/vadimdemedes/ink)\n\n\n## Install\n\n```\n$ npm install ink react\n```\n\n\n## Usage\n\n```jsx\nimport React, {Component} from 'react';\nimport {render, Color} from 'ink';\n\nclass Counter extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\ti: 0\n\t\t};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Color green>\n\t\t\t\t{this.state.i} tests passed\n\t\t\t</Color>\n\t\t);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.timer = setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\ti: this.state.i + 1\n\t\t\t});\n\t\t}, 100);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.timer);\n\t}\n}\n\nrender(<Counter/>);\n```\n\n<img src=\"media/demo.svg\" width=\"600\">\n\nYou can also check it out live on [repl.it sandbox](https://ink-counter-demo.vadimdemedes.repl.run/).\nFeel free to play around with the code and fork this repl at [https://repl.it/@vadimdemedes/ink-counter-demo](https://repl.it/@vadimdemedes/ink-counter-demo).\n\n\n## Built with Ink\n\n- [emoj](https://github.com/sindresorhus/emoj) - Find relevant emoji on the command-line.\n- [emma](https://github.com/maticzav/emma-cli) - Terminal assistant to find and install npm packages.\n- [swiff](https://github.com/simple-integrated-marketing/swiff) - Multi-environment command line tools for time-saving web developers.\n- [changelog-view](https://github.com/jdeniau/changelog-view) - Tool view changelog in console.\n\n\n## Contents\n\n- [Getting Started](#getting-started)\n- [Examples](#examples)\n- [API](#api)\n- [Building Layouts](#building-layouts)\n- [Built-in Components](#built-in-components)\n- [Useful Components](#useful-components)\n- [Testing](#testing)\n\n\n## Getting Started\n\nInk's goal is to provide the same component-based UI building experience that React provides, but for command-line apps. It uses [yoga-layout](https://github.com/facebook/yoga) to allow Flexbox layouts in the terminal. If you are already familiar with React, you already know Ink.\n\nThe key difference you have to remember is that the rendering result isn't a DOM, but a string, which Ink writes to the output.\n\nTo ensure all examples work and you can begin your adventure with Ink, make sure to set up Babel with a React preset. After [installing Babel](https://babeljs.io/docs/en/usage), configure it in `package.json`:\n\n```json\n{\n\t\"babel\": {\n\t\t\"presets\": [\n\t\t\t\"@babel/preset-react\"\n\t\t]\n\t}\n}\n```\n\nDon't forget to import `React` into every file that contains JSX:\n\n```jsx\nimport React from 'react';\nimport {render, Box} from 'ink';\n\nconst Demo = () => (\n\t<Box>\n\t\tHello World\n\t</Box>\n);\n\nrender(<Demo/>);\n```\n\n\n## Examples\n\n- [Jest](examples/jest/jest.js) - Implementation of basic Jest UI [(live demo)](https://ink-jest-demo.vadimdemedes.repl.run/).\n- [Counter](examples/counter/counter.js) - Simple counter that increments every 100ms [(live demo)](https://ink-counter-demo.vadimdemedes.repl.run/).\n\n\n## API\n\nSince Ink is a React renderer, it means that all features of React are supported.\nHead over to [React](https://reactjs.org) website for documentation on how to use it.\nIn this readme only Ink's methods will be documented.\n\n#### render(tree, options)\n\nReturns: `Instance`\n\nMount a component and render the output.\n\n##### tree\n\nType: `ReactElement`\n\n##### options\n\nType: `Object`\n\n###### stdout\n\nType: `stream.Writable`<br>\nDefault: `process.stdout`\n\nOutput stream where app will be rendered.\n\n###### stdin\n\nType: `stream.Readable`<br>\nDefault: `process.stdin`\n\nInput stream where app will listen for input.\n\n###### exitOnCtrlC\n\nType: `boolean`<br>\nDefault: `true`\n\nConfigure whether Ink should listen to Ctrl+C keyboard input and exit the app.\nThis is needed in case `process.stdin` is in [raw mode](https://nodejs.org/api/tty.html#tty_readstream_setrawmode_mode), because then Ctrl+C is ignored by default and process is expected to handle it manually.\n\n###### debug\n\nType: `boolean`<br>\nDefault: `false`\n\nIf `true`, each update will be rendered as a separate output, without replacing the previous one.\n\n```jsx\nimport React, {Component} from 'react';\nimport {render, Box} from 'ink';\n\nclass Counter extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\ti: 0\n\t\t};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Box>\n\t\t\t\tIteration #{this.state.i}\n\t\t\t</Box>\n\t\t);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.timer = setInterval(() => {\n\t\t\tthis.setState(prevState => ({\n\t\t\t\ti: prevState.i + 1\n\t\t\t}));\n\t\t}, 100);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.timer);\n\t}\n}\n\nconst app = render(<Counter/>);\n\nsetTimeout(() => {\n\t// Enough counting\n\tapp.unmount();\n}, 1000);\n```\n\nThere's also a shortcut to avoid passing `options` object:\n\n```jsx\nrender(<Counter>, process.stdout);\n```\n\n#### Instance\n\nThis is the object that `render()` returns.\n\n##### rerender\n\nReplace previous root node with a new one or update props of the current root node.\n\n```jsx\n// Update props of the root node\nconst {rerender} = render(<Counter count={1}/>);\nrerender(<Counter count={2}/>);\n\n// Replace root node\nconst {rerender} = render(<OldCounter/>);\nrerender(<NewCounter/>);\n```\n\n##### unmount\n\nManually unmount the whole Ink app.\n\n```jsx\nconst {unmount} = render(<MyApp/>);\nunmount();\n```\n\n##### waitUntilExit\n\nReturns a promise, which resolves when app is unmounted.\n\n```jsx\nconst {unmount, waitUntilExit} = render(<MyApp/>);\n\nsetTimeout(unmount, 1000);\n\nawait waitUntilExit(); // resolves after `unmount()` is called\n```\n\n## Building Layouts\n\nInk uses [Yoga](https://github.com/facebook/yoga) - a Flexbox layout engine to build great user interfaces for your CLIs.\nIt's important to remember that each element is a Flexbox container.\nThink of it as if each `<div>` in the browser had `display: flex`.\nSee `<Box>` built-in component below for documentation on how to use Flexbox layouts in Ink.\n\n\n### Built-in Components\n\n#### `<Box>`\n\n`<Box>` it's an essential Ink component to build your layout. It's like a `<div style=\"display: flex\">` in a browser.\n\nImport:\n\n```js\nimport {Box} from 'ink';\n```\n\n##### Dimensions\n\n###### width\n\nType: `number`, `string`\n\nWidth of the element in spaces. You can also set it in percent, which will calculate the width based on the width of parent element.\n\n```jsx\n<Box width={4}>X</Box> //=> 'X   '\n```\n\n```jsx\n<Box width={10}>\n\t<Box width=\"50%\">X</Box>\n\tY\n</Box> //=> 'X    Y'\n```\n\n###### height\n\nType: `number`, `string`\n\nHeight of the element in lines (rows). You can also set it in percent, which will calculate the height based on the height of parent element.\n\n```jsx\n<Box height={4}>X</Box> //=> 'X\\n\\n\\n'\n```\n\n```jsx\n<Box height={6} flexDirection=\"column\">\n\t<Box height=\"50%\">X</Box>\n\tY\n</Box> //=> 'X\\n\\n\\nY\\n\\n'\n```\n\n###### minWidth\n\nType: `number`\n\nSets a minimum width of the element. Percentages aren't supported yet, see https://github.com/facebook/yoga/issues/872.\n\n###### minHeight\n\nType: `number`\n\nSets a minimum height of the element. Percentages aren't supported yet, see https://github.com/facebook/yoga/issues/872.\n\n##### Wrapping\n\n###### textWrap\n\nType: `string`<br>\nValues: `wrap` `truncate` `truncate-start` `truncate-middle` `truncate-end`\n\nThis property tells Ink to wrap or truncate text content of `<Box>` if its width is larger than container. If `wrap` is passed, Ink will wrap text and split it into multiple lines. If `truncate-*` is passed, Ink will truncate text instead, which will result in one line of text with the rest cut off.\n\n*Note:* Ink doesn't wrap text by default.\n\n```jsx\n<Box textWrap=\"wrap\">Hello World</Box>\n//=> 'Hello\\nWorld'\n\n// `truncate` is an alias to `truncate-end`\n<Box textWrap=\"truncate\">Hello World</Box>\n//=> 'Hello…'\n\n<Box textWrap=\"truncate-middle\">Hello World</Box>\n//=> 'He…ld'\n\n<Box textWrap=\"truncate-start\">Hello World</Box>\n//=> '…World'\n```\n\n##### Padding\n\n###### paddingTop\n\nType: `number`<br>\nDefault: `0`\n\n###### paddingBottom\n\nType: `number`<br>\nDefault: `0`\n\n###### paddingLeft\n\nType: `number`<br>\nDefault: `0`\n\n###### paddingRight\n\nType: `number`<br>\nDefault: `0`\n\n###### paddingX\n\nType: `number`<br>\nDefault: `0`\n\n###### paddingY\n\nType: `number`<br>\nDefault: `0`\n\n###### padding\n\nType: `number`<br>\nDefault: `0`\n\n```jsx\n<Box paddingTop={2}>Top</Box>\n<Box paddingBottom={2}>Bottom</Box>\n<Box paddingLeft={2}>Left</Box>\n<Box paddingRight={2}>Right</Box>\n<Box paddingX={2}>Left and right</Box>\n<Box paddingY={2}>Top and bottom</Box>\n<Box padding={2}>Top, bottom, left and right</Box>\n```\n\n##### Margin\n\n###### marginTop\n\nType: `number`<br>\nDefault: `0`\n\n###### marginBottom\n\nType: `number`<br>\nDefault: `0`\n\n###### marginLeft\n\nType: `number`<br>\nDefault: `0`\n\n###### marginRight\n\nType: `number`<br>\nDefault: `0`\n\n###### marginX\n\nType: `number`<br>\nDefault: `0`\n\n###### marginY\n\nType: `number`<br>\nDefault: `0`\n\n###### margin\n\nType: `number`<br>\nDefault: `0`\n\n```jsx\n<Box marginTop={2}>Top</Box>\n<Box marginBottom={2}>Bottom</Box>\n<Box marginLeft={2}>Left</Box>\n<Box marginRight={2}>Right</Box>\n<Box marginX={2}>Left and right</Box>\n<Box marginY={2}>Top and bottom</Box>\n<Box margin={2}>Top, bottom, left and right</Box>\n```\n\n##### Flex\n\n###### flexGrow\n\nType: `number`<br>\nDefault: `0`\n\nSee [flex-grow](https://css-tricks.com/almanac/properties/f/flex-grow/).\n\n```jsx\n<Box>\n\tLabel:\n\t<Box flexGrow={1}>\n\t\tFills all remaining space\n\t</Box>\n</Box>\n```\n\n###### flexShrink\n\nType: `number`<br>\nDefault: `1`\n\nSee [flex-shrink](https://css-tricks.com/almanac/properties/f/flex-shrink/).\n\n```jsx\n<Box width={20}>\n\t<Box flexShrink={2} width={10}>\n\t\tWill be 1/4\n\t</Box>\n\t<Box width={10}>\n\t\tWill be 3/4\n\t</Box>\n</Box>\n```\n\n###### flexBasis\n\nType: `number`, `string`<br>\n\nSee [flex-basis](https://css-tricks.com/almanac/properties/f/flex-basis/).\n\n```jsx\n<Box width={6}>\n\t<Box flexBasis={3}>X</Box>\n\tY\n</Box> //=> 'X  Y'\n```\n\n```jsx\n<Box width={6}>\n\t<Box flexBasis=\"50%\">X</Box>\n\tY\n</Box> //=> 'X  Y'\n```\n\n###### flexDirection\n\nType: `string`<br>\nAllowed values: `row`, `row-reverse`, `column` and `column-reverse`\n\nSee [flex-direction](https://css-tricks.com/almanac/properties/f/flex-direction/).\n\n```jsx\n<Box>\n\t<Box marginRight={1}>X</Box>\n\t<Box>Y</Box>\n</Box>\n// X Y\n\n<Box flexDirection=\"row-reverse\">\n\t<Box>X</Box>\n\t<Box marginRight={1}>Y</Box>\n</Box>\n// Y X\n\n<Box flexDirection=\"column\">\n\t<Box>X</Box>\n\t<Box>Y</Box>\n</Box>\n// X\n// Y\n\n<Box flexDirection=\"column-reverse\">\n\t<Box>X</Box>\n\t<Box>Y</Box>\n</Box>\n// Y\n// X\n```\n\n###### alignItems\n\nType: `string`<br>\nAllowed values: `flex-start`, `center` and `flex-end`\n\nSee [align-items](https://css-tricks.com/almanac/properties/f/align-items/).\n\n```jsx\n<Box alignItems=\"flex-start\">\n\t<Box marginRight={1}>X</Box>\n\t<Box>{`A\\nB\\nC`}</Box>\n</Box>\n// X A\n//   B\n//   C\n\n<Box alignItems=\"center\">\n\t<Box marginRight={1}>X</Box>\n\t<Box>{`A\\nB\\nC`}</Box>\n</Box>\n//   A\n// X B\n//   C\n\n<Box alignItems=\"flex-end\">\n\t<Box marginRight={1}>X</Box>\n\t<Box>{`A\\nB\\nC`}</Box>\n</Box>\n//   A\n//   B\n// X C\n```\n\n###### justifyContent\n\nType: `string`<br>\nAllowed values: `flex-start`, `center`, `flex-end`, `space-between` and `space-around`.\n\nSee [justify-content](https://css-tricks.com/almanac/properties/f/justify-content/).\n\n```jsx\n<Box justifyContent=\"flex-start\">\n\t<Box>X</Box>\n</Box>\n// [X      ]\n\n<Box justifyContent=\"center\">\n\t<Box>X</Box>\n</Box>\n// [   X   ]\n\n<Box justifyContent=\"flex-end\">\n\t<Box>X</Box>\n</Box>\n// [      X]\n\n<Box justifyContent=\"space-between\">\n\t<Box>X</Box>\n\t<Box>Y</Box>\n</Box>\n// [X      Y]\n\n<Box justifyContent=\"space-around\">\n\t<Box>X</Box>\n\t<Box>Y</Box>\n</Box>\n// [  X   Y  ]\n```\n\n\n#### `<Color>`\n\nThe `<Color>` component is a simple wrapper around [the `chalk` API](https://github.com/chalk/chalk#api).\nIt supports all of the chalk's methods as `props`.\n\nImport:\n\n```js\nimport {Color} from 'ink';\n```\n\nUsage:\n\n```jsx\n<Color rgb={[255, 255, 255]} bgKeyword=\"magenta\">\n\tHello!\n</Color>\n\n<Color hex=\"#000000\" bgHex=\"#FFFFFF\">\n\tHey there\n</Color>\n\n<Color blue>\n\tI'm blue\n</Color>\n```\n\n#### `<Text>`\n\nThis component can change the style of the text, make it bold, underline, italic or strikethrough.\n\nImport:\n\n```js\nimport {Text} from 'ink';\n```\n\n##### bold\n\nType: `boolean`<br>\nDefault: `false`\n\n##### italic\n\nType: `boolean`<br>\nDefault: `false`\n\n##### underline\n\nType: `boolean`<br>\nDefault: `false`\n\n##### strikethrough\n\nType: `boolean`<br>\nDefault: `false`\n\nUsage:\n\n```jsx\n<Text bold>I am bold</Text>\n<Text italic>I am italic</Text>\n<Text underline>I am underline</Text>\n<Text strikethrough>I am strikethrough</Text>\n```\n\n#### `<Static>`\n\n`<Static>` component allows permanently rendering output to stdout and preserving it across renders.\nComponents passed to `<Static>` as children will be written to stdout only once and will never be rerendered.\n`<Static>` output comes first, before any other output from your components, no matter where it is in the tree.\nIn order for this mechanism to work properly, at most one `<Static>` component must be present in your node tree and components that were rendered must never update their output. Ink will detect new children appended to `<Static>` and render them to stdout.\n\n**Note:** `<Static>` accepts only an array of children and each of them must have a unique key.\n\nExample use case for this component is Jest's output:\n\n![](https://jestjs.io/img/content/feature-fast.png)\n\nJest continuously writes the list of completed tests to the output, while updating test results at the bottom of the output in real-time. Here's how this user interface could be implemented with Ink:\n\n```jsx\n<>\n\t<Static>\n\t\t{tests.map(test => (\n\t\t\t<Test key={test.id} title={test.title}/>\n\t\t))}\n\t</Static>\n\n\t<Box marginTop={1}>\n\t\t<TestResults passed={results.passed} failed={results.failed}/>\n\t</Box>\n</>\n```\n\nSee [examples/jest](examples/jest/jest.js) for a basic implementation of Jest's UI.\n\n#### `<AppContext>`\n\n`<AppContext>` is a [React context](https://reactjs.org/docs/context.html#reactcreatecontext), which exposes a method to manually exit the app (unmount).\n\nImport:\n\n```js\nimport {AppContext} from 'ink';\n```\n\n##### exit\n\nType: `Function`\n\nExit (unmount) the whole Ink app.\n\nUsage:\n\n```jsx\n<AppContext.Consumer>\n\t{({ exit }) => (\n\t\t{/* Calling `onExit()` from within <MyApp> will unmount the app */}\n\t\t<MyApp onExit={exit}/>\n\t)}\n</AppContext.Consumer>\n```\n\nIf `exit` is called with an Error, `waitUntilExit` will reject with that error.\n\n#### `<StdinContext>`\n\n`<StdinContext>` is a [React context](https://reactjs.org/docs/context.html#reactcreatecontext), which exposes input stream.\n\nImport:\n\n```js\nimport {StdinContext} from 'ink';\n```\n\n##### stdin\n\nType: `stream.Readable`<br>\nDefault: `process.stdin`\n\nStdin stream passed to `render()` in `options.stdin` or `process.stdin` by default.\nUseful if your app needs to handle user input.\n\nUsage:\n\n```jsx\n<StdinContext.Consumer>\n\t{({ stdin }) => (\n\t\t<MyComponent stdin={stdin}/>\n\t)}\n</StdinContext.Consumer>\n```\n\n##### setRawMode\n\nType: `function`<br>\n\nSee [`setRawMode`](https://nodejs.org/api/tty.html#tty_readstream_setrawmode_mode).\nInk exposes this function via own `<StdinContext>` to be able to handle <kbd>Ctrl</kbd>+<kbd>C</kbd>, that's why you should use Ink's `setRawMode` instead of `process.stdin.setRawMode`. Ink also enables `keypress` events via [`readline.emitKeypressEvents()`](https://nodejs.org/api/readline.html#readline_readline_emitkeypressevents_stream_interface) when raw mode is enabled.\n\nUsage:\n\n```jsx\n<StdinContext.Consumer>\n\t{({ setRawMode }) => (\n\t\t<MyComponent setRawMode={setRawMode}/>\n\t)}\n</StdinContext.Consumer>\n```\n\n#### `<StdoutContext>`\n\n`<StdoutContext>` is a [React context](https://reactjs.org/docs/context.html#reactcreatecontext), which exposes stdout stream, where Ink renders your app.\n\nImport:\n\n```js\nimport {StdoutContext} from 'ink';\n```\n\n##### stdout\n\nType: `stream.Writable`<br>\nDefault: `process.stdout`\n\nUsage:\n\n```jsx\n<StdoutContext.Consumer>\n\t{({ stdout }) => (\n\t\t<MyComponent stdout={stdout}/>\n\t)}\n</StdoutContext.Consumer>\n```\n\n\n## Useful Components\n\n- [ink-text-input](https://github.com/vadimdemedes/ink-text-input) - Text input.\n- [ink-spinner](https://github.com/vadimdemedes/ink-spinner) - Spinner.\n- [ink-select-input](https://github.com/vadimdemedes/ink-select-input) - Select (dropdown) input.\n- [ink-link](https://github.com/sindresorhus/ink-link) - Link component.\n- [ink-box](https://github.com/sindresorhus/ink-box) - Styled box component.\n- [ink-gradient](https://github.com/sindresorhus/ink-gradient) - Gradient color component.\n- [ink-big-text](https://github.com/sindresorhus/ink-big-text) - Awesome text component.\n- [ink-image](https://github.com/kevva/ink-image) - Display images inside the terminal.\n- [ink-tab](https://github.com/jdeniau/ink-tab) - Tab component.\n- [ink-color-pipe](https://github.com/LitoMore/ink-color-pipe) - Create color text with simpler style strings in Ink.\n\n### Incompatible components\n\nThese are components that haven't migrated to Ink 2 yet:\n\n- [ink-progress-bar](https://github.com/brigand/ink-progress-bar) - Configurable component for rendering progress bars.\n- [ink-console](https://github.com/ForbesLindesay/ink-console) - Render output from `console[method]` calls in a scrollable panel.\n- [ink-confirm-input](https://github.com/kevva/ink-confirm-input) - Yes/No confirmation input.\n- [ink-checkbox-list](https://github.com/MaxMEllon/ink-checkbox-list) - Checkbox.\n- [ink-quicksearch](https://github.com/aicioara/ink-quicksearch) - Select Component with fast quicksearch-like navigation\n- [ink-autocomplete](https://github.com/maticzav/ink-autocomplete) - Autocomplete.\n- [ink-table](https://github.com/maticzav/ink-table) - Table component.\n- [ink-broadcast](https://github.com/jimmed/ink-broadcast) - Implementation of react-broadcast for Ink.\n- [ink-router](https://github.com/jimmed/ink-router) - Implementation of react-router for Ink.\n- [ink-select](https://github.com/karaggeorge/ink-select) - Select component.\n- [ink-scrollbar](https://github.com/karaggeorge/ink-scrollbar) - Scrollbar component.\n- [ink-text-animation](https://github.com/yardnsm/ink-text-animation) - Text animation component.\n- [ink-figlet](https://github.com/KimotoYanke/ink-figlet) - Large text component with Figlet fonts.\n- [ink-divider](https://github.com/JureSotosek/ink-divider) - A divider component.\n\n\n## Testing\n\nInk components are simple to test with [ink-testing-library](https://github.com/vadimdemedes/ink-testing-library).\nHere's a simple example that checks how component is rendered:\n\n```jsx\nimport React from 'react';\nimport {Text} from 'ink';\nimport {render} from 'ink-testing-library';\n\nconst Test = () => <Text>Hello World</Text>;\nconst {lastFrame} = render(<Test/>);\n\nlastFrame() === 'Hello World'; //=> true\n```\n\nVisit [ink-testing-library](https://github.com/vadimdemedes/ink-testing-library) for more examples and full documentation.\n\n\n## Maintainers\n\n- [Vadim Demedes](https://github.com/vadimdemedes)\n- [Sindre Sorhus](https://github.com/sindresorhus)\n\n\n## License\n\nMIT\n",
  "readmeFilename": "readme.md",
  "_id": "ink@2.1.1",
  "_from": "ink@^2.1.1"
}
