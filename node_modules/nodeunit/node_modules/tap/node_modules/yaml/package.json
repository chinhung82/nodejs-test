{
  "name": "yaml",
  "version": "1.5.1",
  "license": "ISC",
  "author": {
    "name": "Eemeli Aro",
    "email": "eemeli@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "github:eemeli/yaml"
  },
  "description": "JavaScript parser and stringifier for YAML",
  "keywords": [
    "YAML",
    "parser",
    "stringifier"
  ],
  "homepage": "https://eemeli.org/yaml/",
  "files": [
    "browser/",
    "dist/",
    "types/",
    "*.js",
    "!.*.js"
  ],
  "main": "./index.js",
  "browser": {
    "./index.js": "./browser/index.js",
    "./map.js": "./browser/map.js",
    "./pair.js": "./browser/pair.js",
    "./parse-cst.js": "./browser/parse-cst.js",
    "./scalar.js": "./browser/scalar.js",
    "./schema.js": "./browser/schema.js",
    "./seq.js": "./browser/seq.js",
    "./types.js": "./browser/types.js",
    "./types/binary.js": "./browser/types/binary.js",
    "./types/omap.js": "./browser/types/omap.js",
    "./types/pairs.js": "./browser/types/pairs.js",
    "./types/set.js": "./browser/types/set.js",
    "./types/timestamp.js": "./browser/types/timestamp.js",
    "./util.js": "./browser/util.js"
  },
  "scripts": {
    "browser:build": "BABEL_ENV=browser babel src/ --out-dir browser/dist/",
    "browser:copy": "cpy '*.js' '!*.config.js' types/ browser/ --parents",
    "dist:build": "babel src/ --out-dir dist/",
    "build": "npm run dist:build && npm run browser:build && npm run browser:copy",
    "prettier": "prettier --write \"{src,tests}/**/*.js\"",
    "lint": "eslint src/",
    "start": "npm run dist:build && node -i -e 'YAML=require(\".\")'",
    "test": "TRACE_LEVEL=log jest",
    "test:trace": "TRACE_LEVEL=trace,log jest --no-cache",
    "docs:install": "cd docs/ && bundle install",
    "docs:deploy": "cd docs/ && ./deploy.sh",
    "docs": "cd docs/ && bundle exec middleman server",
    "preversion": "npm test && npm run build",
    "prepublishOnly": "npm test && npm run build"
  },
  "browserslist": "> 0.5%, not dead",
  "jest": {
    "testMatch": [
      "**/tests/**/*.js"
    ],
    "testPathIgnorePatterns": [
      "tests/common",
      "tests/cst/common"
    ]
  },
  "prettier": {
    "semi": false,
    "singleQuote": true
  },
  "devDependencies": {
    "@babel/cli": "^7.4.4",
    "@babel/core": "^7.4.4",
    "@babel/plugin-proposal-class-properties": "^7.4.4",
    "@babel/plugin-transform-runtime": "^7.4.4",
    "@babel/preset-env": "^7.4.4",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.8.0",
    "babel-plugin-trace": "^1.1.0",
    "cpy-cli": "^2.0.0",
    "eslint": "^5.16.0",
    "eslint-config-prettier": "^4.2.0",
    "eslint-plugin-prettier": "^3.0.1",
    "fast-check": "^1.14.0",
    "jest": "^24.8.0",
    "prettier": "^1.17.0"
  },
  "dependencies": {
    "@babel/runtime": "^7.4.4"
  },
  "engines": {
    "node": ">= 6"
  },
  "readme": "# YAML <a href=\"https://www.npmjs.com/package/yaml\"><img align=\"right\" src=\"https://badge.fury.io/js/yaml.svg\" title=\"npm package\" /></a><a href=\"https://travis-ci.org/eemeli/yaml\"><img align=\"right\" src=\"https://travis-ci.org/eemeli/yaml.svg?branch=master\" title=\"Build status\" /></a>\n\n`yaml` is a JavaScript parser and stringifier for [YAML](http://yaml.org/), a human friendly data serialization standard. It supports both parsing and stringifying data using all versions of YAML, along with all common data schemas. As a particularly distinguishing feature, `yaml` fully supports reading and writing comments and blank lines in YAML documents.\n\nThe library is released under the ISC open source license, and the code is [available on GitHub](https://github.com/eemeli/yaml/). It runs on Node.js 6 and later with no external dependencies, and in browsers from IE 11 upwards (Note: `@babel/runtime` is used only by the `\"browser\"` entry point).\n\nFor more information, see the project's documentation site: [**eemeli.org/yaml**](https://eemeli.org/yaml/)\n\n> To install:\n\n```sh\nnpm install yaml\n# or\nyarn add yaml\n```\n\nNote: `yaml` 0.x and 1.x are rather different implementations. For the earlier `yaml`, see [tj/js-yaml](https://github.com/tj/js-yaml).\n\n## API Overview\n\nThe API provided by `yaml` has three layers, depending on how deep you need to go: [Parse & Stringify](https://eemeli.org/yaml/#parse-amp-stringify), [Documents](https://eemeli.org/yaml/#documents), and the [CST Parser](https://eemeli.org/yaml/#cst-parser). The first has the simplest API and \"just works\", the second gets you all the bells and whistles supported by the library along with a decent [AST](https://eemeli.org/yaml/#content-nodes), and the third is the closest to YAML source, making it fast, raw, and crude.\n\n```js\nimport YAML from 'yaml'\n// or\nconst YAML = require('yaml')\n```\n\n### Parse & Stringify\n\n- [`YAML.parse(str, options): value`](https://eemeli.org/yaml/#yaml-parse)\n- [`YAML.stringify(value, options): string`](https://eemeli.org/yaml/#yaml-stringify)\n\n### YAML Documents\n\n- [`YAML.createNode(value, wrapScalars, tag): Node`](https://eemeli.org/yaml/#creating-nodes)\n- [`YAML.defaultOptions`](https://eemeli.org/yaml/#options)\n- [`YAML.Document`](https://eemeli.org/yaml/#yaml-documents)\n  - [`constructor(options)`](https://eemeli.org/yaml/#creating-documents)\n  - [`defaults`](https://eemeli.org/yaml/#options)\n  - [`#anchors`](https://eemeli.org/yaml/#working-with-anchors)\n  - [`#contents`](https://eemeli.org/yaml/#content-nodes)\n  - [`#errors`](https://eemeli.org/yaml/#errors)\n- [`YAML.parseAllDocuments(str, options): YAML.Document[]`](https://eemeli.org/yaml/#parsing-documents)\n- [`YAML.parseDocument(str, options): YAML.Document`](https://eemeli.org/yaml/#parsing-documents)\n\n```js\nimport { Pair, YAMLMap, YAMLSeq } from 'yaml/types'\n```\n\n- [`new Pair(key, value)`](https://eemeli.org/yaml/#creating-nodes)\n- [`new YAMLMap()`](https://eemeli.org/yaml/#creating-nodes)\n- [`new YAMLSeq()`](https://eemeli.org/yaml/#creating-nodes)\n\n### CST Parser\n\n```js\nimport parseCST from 'yaml/parse-cst'\n```\n\n- [`parseCST(str): CSTDocument[]`](https://eemeli.org/yaml/#parsecst)\n- [`YAML.parseCST(str): CSTDocument[]`](https://eemeli.org/yaml/#parsecst)\n\n## YAML.parse\n\n```yaml\n# file.yml\nYAML:\n  - A human-readable data serialization language\n  - https://en.wikipedia.org/wiki/YAML\nyaml:\n  - A complete JavaScript implementation\n  - https://www.npmjs.com/package/yaml\n```\n\n```js\nimport fs from 'fs'\nimport YAML from 'yaml'\n\nYAML.parse('3.14159')\n// 3.14159\n\nYAML.parse('[ true, false, maybe, null ]\\n')\n// [ true, false, 'maybe', null ]\n\nconst file = fs.readFileSync('./file.yml', 'utf8')\nYAML.parse(file)\n// { YAML:\n//   [ 'A human-readable data serialization language',\n//     'https://en.wikipedia.org/wiki/YAML' ],\n//   yaml:\n//   [ 'A complete JavaScript implementation',\n//     'https://www.npmjs.com/package/yaml' ] }\n```\n\n## YAML.stringify\n\n```js\nimport YAML from 'yaml'\n\nYAML.stringify(3.14159)\n// '3.14159\\n'\n\nYAML.stringify([true, false, 'maybe', null])\n// `- true\n// - false\n// - maybe\n// - null\n// `\n\nYAML.stringify({ number: 3, plain: 'string', block: 'two\\nlines\\n' })\n// `number: 3\n// plain: string\n// block: >\n//   two\n//\n//   lines\n// `\n```\n\n---\n\nBrowser testing provided by:\n\n<a href=\"https://www.browserstack.com/open-source\">\n<img width=200 src=\"https://eemeli.org/yaml/images/browserstack.svg\" />\n</a>\n",
  "readmeFilename": "README.md",
  "_id": "yaml@1.5.1",
  "_from": "yaml@^1.5.1"
}
