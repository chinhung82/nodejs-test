{
  "name": "map-age-cleaner",
  "version": "0.1.3",
  "description": "Automatically cleanup expired items in a Map",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "SamVerschueren/map-age-cleaner"
  },
  "author": {
    "name": "Sam Verschueren",
    "email": "sam.verschueren@gmail.com",
    "url": "github.com/SamVerschueren"
  },
  "main": "dist/index.js",
  "engines": {
    "node": ">=6"
  },
  "scripts": {
    "prepublishOnly": "npm run build",
    "pretest": "npm run build -- --sourceMap",
    "test": "npm run lint && nyc ava dist/test.js",
    "lint": "tslint --format stylish --project .",
    "build": "npm run clean && tsc",
    "clean": "del-cli dist"
  },
  "files": [
    "dist/index.js",
    "dist/index.d.ts"
  ],
  "keywords": [
    "map",
    "age",
    "cleaner",
    "maxage",
    "expire",
    "expiration",
    "expiring"
  ],
  "dependencies": {
    "p-defer": "^1.0.0"
  },
  "devDependencies": {
    "@types/delay": "^2.0.1",
    "@types/node": "^10.7.1",
    "ava": "^0.25.0",
    "codecov": "^3.0.0",
    "del-cli": "^1.1.0",
    "delay": "^3.0.0",
    "nyc": "^12.0.0",
    "tslint": "^5.11.0",
    "tslint-xo": "^0.9.0",
    "typescript": "^3.0.1"
  },
  "typings": "dist/index.d.ts",
  "sideEffects": false,
  "nyc": {
    "exclude": [
      "dist/test.js"
    ]
  },
  "readme": "# map-age-cleaner\n\n[![Build Status](https://travis-ci.org/SamVerschueren/map-age-cleaner.svg?branch=master)](https://travis-ci.org/SamVerschueren/map-age-cleaner) [![codecov](https://codecov.io/gh/SamVerschueren/map-age-cleaner/badge.svg?branch=master)](https://codecov.io/gh/SamVerschueren/map-age-cleaner?branch=master)\n\n> Automatically cleanup expired items in a Map\n\n\n## Install\n\n```\n$ npm install map-age-cleaner\n```\n\n\n## Usage\n\n```js\nimport mapAgeCleaner from 'map-age-cleaner';\n\nconst map = new Map([\n\t['unicorn', {data: 'ðŸ¦„', maxAge: Date.now() + 1000}]\n]);\n\nmapAgeCleaner(map);\n\nmap.has('unicorn');\n//=> true\n\n// Wait for 1 second...\n\nmap.has('unicorn');\n//=> false\n```\n\n> **Note**: Items have to be ordered ascending based on the expiry property. This means that the item which will be expired first, should be in the first position of the `Map`.\n\n\n## API\n\n### mapAgeCleaner(map, [property])\n\nReturns the `Map` instance.\n\n#### map\n\nType: `Map`\n\nMap instance which should be cleaned up.\n\n#### property\n\nType: `string`<br>\nDefault: `maxAge`\n\nName of the property which olds the expiry timestamp.\n\n\n## Related\n\n- [expiry-map](https://github.com/SamVerschueren/expiry-map) - A `Map` implementation with expirable items\n- [expiry-set](https://github.com/SamVerschueren/expiry-set) - A `Set` implementation with expirable keys\n- [mem](https://github.com/sindresorhus/mem) - Memoize functions\n\n\n## License\n\nMIT Â© [Sam Verschueren](https://github.com/SamVerschueren)\n",
  "readmeFilename": "readme.md",
  "_id": "map-age-cleaner@0.1.3",
  "_from": "map-age-cleaner@^0.1.1"
}
