{
  "name": "jackspeak",
  "version": "1.3.7",
  "description": "A very strict and proper argument parser.",
  "main": "index.js",
  "scripts": {
    "build-examples": "for i in examples/*.js ; do node $i -h > ${i/.js/.txt}; done",
    "snap": "TAP_SNAPSHOT=1 tap test/*.js -J && npm run build-examples",
    "test": "tap test/*.js --100 -J",
    "preversion": "npm test",
    "postversion": "npm publish",
    "postpublish": "git push origin --all; git push origin --tags"
  },
  "license": "ISC",
  "devDependencies": {
    "tap": "^13.0.0-rc.25"
  },
  "files": [
    "index.js"
  ],
  "dependencies": {
    "cliui": "^4.1.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/isaacs/jackspeak.git"
  },
  "keywords": [
    "argument",
    "parser",
    "args",
    "option",
    "flag",
    "cli",
    "command",
    "line",
    "parse",
    "parsing"
  ],
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me"
  },
  "engines": {
    "node": ">=8"
  },
  "readme": "# jackspeak\n\nA very strict and proper argument parser.\n\n## USAGE\n\nPass one or more objects into the exported `jack(...)` function.  Each\nobject can have the following fields, and would typically represent a\n\"section\" in a usage/help output.\n\nUsing multiple sections allows for using some of the \"special\" fields\nas argument names as well; just put them in different sections.\n\n- `main` Function\n\n    May only appear once.  If provided, will be called with the resulting\n    parsed object.\n\n    Each of the defined flags and options will be set on the result\n    object, as well as a special `_` array containing all the positional\n    arguments.  `_` also has the following properties:\n\n    - `usage` A function that dumps the help output to stdout.\n    - `explicit` A `Set` containing the names of all arguments that were\n      explicitly set.\n    - `original` The `argv` array before any expansions.\n    - `parsed` The `argv` array once all aliases have been expanded.\n\n- `usage` String or Array\n\n    The `Usage: ...` bits that go at the top of the help output\n\n- `description` String\n\n    A heading for the section.  Something like `File Options` to\n    preface all of the options for working with files.\n\n- `help` String\n\n    A longer-form (multi-paragraph) section of text that explains the\n    stuff in more details.\n\n- `argv` Array\n\n    A list of arguments to parse.  If not provided, jackspeak will\n    pull form `process.argv`.  It knows how to skip over the node binary\n    and main script filename.\n\n    If a section is just an array, then it'll be treated as the argv.\n\n- `env` Object\n\n    A set of key-value pairs to pull environment variables from.  If\n    not specified, jackspeak will pull from `process.env`.\n\n    Note that environs are parsed and loaded right away when they are\n    defined, so you must put `env` on a jackspeak object before\n    definint any environent \n\n- One or more argument definition objects.  These can be formed using\n  the functions exported by `require('jackspeak')`.  The key is the\n  full canonical name of the argument as it appears in the parsed\n  result set.\n\n    Note that the `--help` flag with the `-h` shorthand will be added\n    by default, and that `--` will always stop parsing and treat the\n    rest of the argv as positional arguments.  However, `help` and\n    `--` _may_ be added to a jack section to customize the usage text.\n\n    All types can have the following options:\n\n    - `description` - Help text for this option.\n\n    - `hidden` - Do not show this value in the help output.\n\n    - `implies` - JavaScript object of values to set in the result\n      objet when this flag or option is encountered in the arguments.\n      This can be used to have one flag enable another by default, for\n      example.\n\n    The types are:\n\n    - `flag(options)` - A boolean value which can be set or unset, but\n      not given a value.\n\n        Flags can have the following options:\n\n        - `default` - Either `true` or `false`.  If unspecified, flags\n          default to `false`.\n\n        - `envDefault` - The name of an environment variable which provides\n          the default value for this flag.  The environment variable will\n          be parsed as an `env(flag(...))` value, with `'1'` for true and\n          `'0'` for false.\n\n        - `short` - A \"short\" form of the value which is indicated\n          with a single dash.  If `short` is a single character, then\n          it can be combined gnu-style with other short flags.\n\n        - `negate` - An object defining how the `--no-<whatever>` form\n          of the flag works.  It can have any options that would be\n          passed to a flag, other than `negate`.\n\n            For example, it can specify the help text for the negated\n            form, or provide a different shorthand character.  So, for\n            example, `--color` could have `-c` as a shorthand, and\n            `--no-color` could be shorthanded to `-C`.\n\n        - `alias` - Either a string or array of what this flag expands\n          to.  This means that the flag key won't have a value, but\n          will instead be expanded to its alias.  To expand an alias\n          to multiple arguments, use an array.  For example, in the\n          `rsync` program, `-m` expands to `-r -N -l inf\n          --no-remove-listing`\n\n    - `opt(options)` - An argument which takes a value.\n\n        Opts can have the following options:\n\n        - `default` - A default value.  If unspecified, opts default\n          to `undefined`.\n\n        - `envDefault` - The name of an environment variable which provides\n          the default value for this opt.\n\n        - `valid` - An array of valid values.  If the user provides a\n          value outside this set, it will throw an error.\n\n        - `alias` - A string or array of options that this option\n          expands to when used.  This works the same as flag aliases,\n          with the exception that you may include the string\n          `${value}` in the alias string(s) to substitute in the value\n          provided to this opt.\n\n            For example, `--big=<n>` could be an alias for\n            `--font-size=<n> --bold` by doing:\n\n            ```js\n            jack({\n              big: opt({\n                alias: ['--font-size=${value}', '--bold']\n              })\n            })\n            ```\n        - `hint` - A string to use in the help output as the value\n          provided to the opt.  For example, if you wanted to print\n          `--output=<file>`, then you'd set `hint: 'file'` here.\n          Defaults to the opt name.\n\n        - `short` - A \"short\" form of the opt which is indicated\n          with a single dash.  If `short` is a single character, then\n          it can be combined gnu-style with short flags, and take a\n          value without an `=` character.\n\n            For example, in [tap](https://www.node-tap.org), `-bRspec`\n            is equivalent to `--bail --reporter=spec`.\n\n    - `num(options)` - An `opt` that is a number.  This will be\n      provided in the result as an actual number (rather than a\n      string) and will raise an error if given a non-numeric value.\n\n        This is numericized by using the `+` operator, so any\n        JavaScript number represenation will do.\n\n        All of the `opt()` options are supported, plus these:\n\n        - `min` - A number that this value cannot be smaller than.\n        - `max` - A number that this value cannot be larger than.\n\n    - `list(options)` - An option which can take multiple values by\n      being specified multiple times, and is represented in the result\n      object as an array of values.  If the list is not present in the\n      arguments, then it will be an empty array.\n\n    - `count(options)` - A flag which can be set multiple times to\n      increase a value.  Unsetting decrements the value, setting\n      increments it.  This can be useful for things like `-v` to set a\n      verbosity level, or `-d` to set a debug level.\n\n        Counts always default to 0.\n\n        Note that a `count` is actually a flag that can be set\n        multiple times.  Thus, it is a composition of the `list` and\n        `flag` types.\n\n    - `env(options)` - An environment variable that the program is\n      interested in.\n\n        All environment variables will be present in the result\n        object.  `env()` can be composed with other types to change\n        how the environment variable is handled.\n\n        - Compose with `flag()` to define an environment variable that\n          is set to `'1'` to mean `true`, or `'0'` or `''` to mean\n          `false`.  Presented in the result object as a boolean value.\n          For example:\n\n            ```js\n            jack({\n              FOO: env(flag({\n                description: 'Set to \"1\" to enable the foo flag'\n              }))\n            })\n            ```\n\n        - Compose with `list()` to define an environment variable that\n          is set to multiple values separated by a delimiter.  For\n          example:\n\n            ```js\n            jack({\n              NODE_DEBUG: env(list({\n                delimiter: ',',\n                description: 'Define which bits to debug'\n              }))\n            })\n            ```\n\n            This can be further composed with `num` to pass in a list\n            of numbers separated by a delimiter.\n\n            When composed with `count` (which is the composition of\n            `list` and `flag`), you would pass in a delimited list of\n            `1` and `0` characters, and it'd count up the `1` values.\n            I don't know why you'd ever do this, but it works.\n\n        - Compose with `num()` to parse the environ as a numeric\n          value, and raise an error if it is non-numeric.\n\n### Type Composition\n\nCompose types by applying more than one function to the arg\ndefinition options.  For example, for a numeric environment\nvariable, you can do:\n\n```js\njack({\n  HOW_MANY_FOOS: env(num({\n    description: 'set to define the number of foos'\n    max: 10,\n    min: 2,\n    default: 5,\n  }))\n})\n```\n\nThe order of composition does not matter in normal cases, but note\nthat some compositions will contradict one another.  For example,\ncomposing `flag` (an argument that does not take a value) with `opt`\n(an argument that _does_ take a value) will result in the outermost\nfunction taking precedence.\n\n## Some Example Code\n\nAlso see [the examples\nfolder](https://github.com/isaacs/jackspeak/tree/master/examples)\n\n```js\nconst { jack, flag, opt, list, count, num } = require('jackspeak')\n\njack({\n  // Optional\n  // the function to call with the options argument when it's all done\n  // if not provided, then jack() will return the parsed options\n  // if any unknown options are passed in, then it'll abort with\n  // the usage output and an error message\n  main: myFunction,\n\n  // Optional\n  // defaults to process.argv, and slices off the first item if\n  // it's process.execPath and the second item if it's\n  // require.main.filename\n  argv: process.argv,\n\n  // Optional\n  // This will be auto-generated from the descriptions if not supplied\n  // top level usage line, printed by -h\n  // will be auto-generated if not specified\n  usage: 'foo [options] <files>',\n\n  // Optional\n  // longer-form help text\n  // will be reformatted and wrapped to terminal column width,\n  // so go ahead and format it however you like here.\n  help: `\n    Executes all the files and interprets their output as\n    TAP formatted test result data.\n\n    To parse TAP data from stdin, specify \"-\" as a filename.\n  `\n\n  // flags don't take a value, they're boolean on or off, and can be\n  // turned off by prefixing with `--no-`\n  // so this adds support for -b to mean --bail, or -B to mean --no-bail\n  flag: flag({\n    // specify a short value if you like.  this must be a single char\n    short: 'f',\n    // description is optional as well.\n    description: `Make the flags wave`,\n    // you can can always negate a flag with `--no-flag`\n    // specifying a negate option will let you define a short\n    // single-char option for negation.\n    negate: {\n      short: 'F',\n      description: `Do not wave the flags`\n    },\n    // default value for flags is 'false', unless you change it\n    default: true\n  }),\n\n  // Options that take a value are specified with `opt()`\n  reporter: opt({\n    short: 'R',\n    description: 'the style of report to display',\n  })\n\n  // if you want a number, say so, and jackspeak will enforce it\n  jobs: num({\n    short: 'j',\n    description: 'how many jobs to run in parallel',\n    default: 1\n  }),\n\n  // Aliases can be a flag or option that expands to\n  // some other value when used.\n  'jobs-auto': flag({\n    short: 'J',\n    alias: '--jobs=' + require('os').cpus().length\n  }),\n\n  // you can also set defaults with an environ of course\n  timeout: num({\n    short: 't',\n    default: +process.env.TAP_TIMEOUT || 30,\n  }),\n\n  // this makes --no-timeout equivalue to setting timeout to zero\n  'no-timeout': flag({\n    short: 'T',\n    alias: '--timeout=0'\n  }),\n\n  // A list is an option that can be specified multiple times,\n  // to expand into an array of all the settings.  Normal opts\n  // will just give you the last value specified.\n  'node-arg': list(),\n\n  // A counter is a flag that increments or decrements its value\n  // each time it's specified.\n  // In this case, `-ddd` would return { debug: 3 } in the result\n  debug: count({\n    short: 'd'\n  })\n\n  // an alias can expand to multiple things, not just one\n  foo: flag({\n    alias: ['--statements=100', '--lines=100', '--branches=100'],\n  }),\n\n  // An option alias can take a value and use it in the expansion.\n  // use `${value}` in the alias to sub in what the user provides\n  covlevel: opt({\n    alias: [\n      '--statements=${value}',\n      '--lines=${value}',\n      '--branches=${value}'\n    ]\n  }),\n\n  // aliases can recurse, as well\n  100: flag({\n    alias: '--covlevel=100'\n  }),\n\n  // opts take a value, and is set to the string in the results\n  // you can combine multiple short-form flags together, but\n  // an opt will end the combine chain, posix-style.  So,\n  // -bofilename would be like --bail --output-file=filename\n  'output-file': opt({\n    short: 'o',\n    // optional: make it -o<file> in the help output insead of -o<value>\n    hint: 'file',\n    description: `Send the raw output to the specified file.`\n  }),\n})\n```\n\n## Name\n\nThe inspiration for this module is [yargs](http://npm.im/yargs), which\nis pirate talk themed.  Yargs has all the features, and is infinitely\nflexible.  \"Jackspeak\" is the slang of the royal navy.  This module\ndoes not have all the features.  It is declarative and rigid by design.\n",
  "readmeFilename": "README.md",
  "_id": "jackspeak@1.3.7",
  "_from": "jackspeak@^1.3.7"
}
